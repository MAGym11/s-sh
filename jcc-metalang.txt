letter  : a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
digit   : 0|1|2|3|4|5|6|7|8|9
bit     : 0|1
nybl    : 0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|A|B|C|D|E|F
int     : [-] <digit> { <digit> }
        | [-] 0x <nybl> { <nybl> }
	    | [-] 0b <bit> { <bit> }
id      : <letter> | _ { <letter> | <digit> | _ }
pType   : i8 | u8 | i16 | u16 | i32 | u32 | i64 | u64 | i128 | u128 | f32 | f64 | f80 | f128 | usize | &
char    : ' <ASCII> '
string  : " { <ASCII> } "
op      : + | - | * | / | % | == | != | <= | < | >= | > | && | "||" | & | ^ | "|" | << | >>
asgnOp  : = | += | -= | *= | /= | %= | <<= | >>= | &= | "|"= | ^=
incDec  : <id> ++ | --
values  : <expr> { , <expr> }
func    : <id> "(" [ <values> ] ")"
negate  : ! | ~ <oper>
deref   : "[" <expr> "]"
paren   : "(" <expr> ")"
mem     : "{" [ <values> ] "}"
address : & <id> | <mem> | <string>
oper    : <negate>
        | <func>
	    | <deref>
	    | <paren>
        | <mem>
        | <scope>
        | <incDec>
        | <address>
        | <id>
        | <int>
        | <char>
        | <string>
        | <pType>
        | _
expr    : <oper> [ <typeDec> ] { <op> <oper> [ <typeDec> ] }
scope   : "{" { <stmt> } "}"
else    : else <stmt>
if      : if "(" <expr> ")" <stmt> [ <else> ]
asgn    : = <expr>
reAsgn  : <asgnOp> <expr>
typeDec : : <expr>
varAsgn : <id> : [ <expr> ] [ <asgn> ] ;
vReAsgn : <id> [ <reAsgn> ] ;
memAsgn : <deref> <typeDec> <asgn> ;
fncStmt : <func> ;
label   : <id> :
jmp     : <id> ;
while   : while "(" <expr> ")" <stmt>
stmt    : <if>
    	| <varAsgn>
        | <vReAsgn>
        | <varDel>
        | <memAsgn>
	    | <fncStmt>
	    | <label>
	    | <jmp>
        | <while>
        | <expr>
	    | ;
param   : [&] <id> <typeDec>
params  : <param> { , <param> }
funcDec : <id> "(" [ <params> ] ")" [ <typeDec> ] <stmt>

char    : ' <UTF-8> '                                                                                                          c
string  : " { <UTF-8> } "                                                                                                      c

type    : <pType> | ( <id> [ <generic> ] )                                                                                     n
generic : "<" <id> ">"                                                                                                         n
enum    : <id> [ <generic> ] ":" "{" <id> { , <id> } "}"                                                                       n
union   : <id> [ <generic> ] ":" "{" <expr> { , <expr> } "}"                                                                   n
struct  : <id> [ <generic> ] ":" "{" <param> { , <param> } "}"                                                                 n
method  : <id> [ <generic> ] ":" ":" "{" { <funcDec> } "}"                                                                     n
